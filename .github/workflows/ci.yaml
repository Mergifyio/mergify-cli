name: Continuous Integration
permissions: read-all

on:
  pull_request:
    branches:
      - main
      - devs/**

jobs:
  linters:
    timeout-minutes: 5
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-python@v6.0.0
        with:
          python-version: 3.14

      - name: Setup
        shell: bash
        run: |
          # nosemgrep: generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip
          pip install -r requirements-poetry.txt
          poetry sync

      - name: Linters
        shell: bash
        run: poetry run poe linters

  test:
    timeout-minutes: 5
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2025, macos-15]
        python: [3.13, 3.14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-python@v6.0.0
        with:
          python-version: ${{ matrix.python }}

      - name: Setup
        shell: bash
        run: |
          # nosemgrep: generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip
          pip install -r requirements-poetry.txt
          poetry sync

      - name: Tests
        shell: bash
        env:
          _MERGIFY_TEST_NEW_FLAKY_DETECTION: "true"
          PYTHONUTF8: "${{ matrix.os == 'windows-2025' && 1 || 0 }}"
        run: poetry run poe test

      - name: Build
        shell: bash
        run: poetry build

      - name: Tests build
        shell: bash
        env:
          PYTHONUTF8: "${{ matrix.os == 'windows-2025' && 1 || 0 }}"
        run: |
          pip install dist/*.whl
          # We check the installed wheel produces a working binary, specially on Windows
          # to ensure the utf8 mode is enabled.
          python -c "import test_binary_build; test_binary_build.test_reexec_enables_utf8_and_prints_emoji();"

  ci-gate:
    if: ${{ !cancelled() }}
    needs:
      - test
      - linters
    runs-on: ubuntu-latest
    steps:
      - name: Verify all jobs succeeded
        uses: Mergifyio/gha-mergify-ci@v10
        with:
          action: wait-jobs
          jobs: ${{ toJSON(needs) }}
